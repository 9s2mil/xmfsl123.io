let moveCount = 0; 
let turnMovesMax = 3;       // Ìïú ÌÑ¥ ÏµúÎåÄ Ïù¥Îèô ÌöüÏàò (Í∏∞Î≥∏ 3)
let turnMovesLeft = turnMovesMax;
let isResolving = false;
let turnDamageTotal = 0;   

function randomEnemyDelta() {
    return 500 + Math.floor(Math.random() * 11) * 1;  // 500..1500 Ïó¨Í∏∞ 1ÏùÑ 100ÏúºÎ°ú
}

// HP ÏÉÅÌÉú Í¥ÄÎ¶¨
const HP = {
    base: 0,
    max: 0,
    current: 0,

    init() {
        // Î¶¨Îçî Ìè¨Ìï® Ï†ÑÏõê Ìï©ÏÇ∞ (slice(1) Ïì∞ÏßÄ Îßê Í≤É)
        const alliesHp = allies.reduce((sum, u) => sum + (u ? u.maxHp : 0), 0);
        this.max = this.base + alliesHp;
        this.current = this.max;
        this.updateBar();
    },

    setHP(value) {
        const prev = this.current;                            // ‚òÖ Ï∂îÍ∞Ä
        this.current = Math.max(0, Math.min(this.max, value));
        this.updateBar();
        if (prev > 0 && this.current === 0) onPartyDefeated(); // ‚òÖ Ï∂îÍ∞Ä
    },


    changeHP(delta) {
        this.setHP(this.current + delta);
    },

    updateBar() {
        const percent = (this.current / this.max) * 100;
        const fill = document.querySelector(".hp-fill");
        const text = document.querySelector(".hp-text");
        if (fill) fill.style.width = percent + "%";
        if (text) text.textContent = `${this.current} / ${this.max}`;
    }
};

document.addEventListener("DOMContentLoaded", () => {
    HP.init();
});

function recalcTotalHP() {
    HP.max = allies.reduce((sum, u) => sum + (u.maxHp || 0), 0);
    HP.current = allies.reduce((sum, u) => sum + (u.hp || 0), 0);
    HP.updateBar();
}

/* === Enemy HP Manager & Rank/State Utils === */
const EnemyHP = {
    max: 1000,
    current: 1000,
    init(max = 1000) {
        this.max = max;
        this.current = max;
        this.updateBar();
    },
    updateBar() {
        const fill = document.querySelector('.enemy-hp-fill');
        const text = document.querySelector('.enemy-hp-text');
        const pct = (this.current / this.max) * 100;
        if (fill) fill.style.width = `${Math.max(0, Math.min(100, pct))}%`;
        if (text) text.textContent = `${this.current} / ${this.max}`;
    },
    damage(n) {
        const d = Math.max(0, Math.floor(n) || 0);
        this.current = Math.max(0, this.current - d);
        this.updateBar();
        if (this.current <= 0) onEnemyDefeated();
    }
};

// 500~1500 ÏÇ¨Ïù¥ 100 Îã®ÏúÑ ÎûúÎç§
function randomEnemyMaxHP() {
    const base = 500 + Math.floor(Math.random() * 11) * 100; // 500..1500
    return base;
}

// Ìó§Îçî Îû≠ÌÅ¨ Ï¶âÏãú+ÏòÅÍµ¨ ÏóÖÎç∞Ïù¥Ìä∏
function bumpRank() {
    const KEY = 'profileV1';
    let obj = {};
    try { obj = JSON.parse(localStorage.getItem(KEY) || '{}') || {}; } catch { }

    const cur = Number(obj.rank || 1);
    obj.rank = cur + 1; // Îû≠ÌÅ¨ ÏÉÅÏäπ
    localStorage.setItem(KEY, JSON.stringify(obj));

    // Profile Î™®ÎìàÏù¥ ÏûàÏúºÎ©¥ ÏÉÅÌÉúÎèÑ Í∞±Ïã†
    if (window.Profile && Profile.state) {
        Profile.state.rank = obj.rank;
    }

    // Ìó§Îçî Ï¶âÏãú Î∞òÏòÅ
    const el = document.getElementById('headerRank');
    if (el) el.textContent = obj.rank;

    // ‚úÖ Î≤ÑÌäºÏóêÎèÑ Ï¶âÏãú Î∞òÏòÅ
    const rankBtn = document.getElementById('btnToggleFooterZ');
    if (rankBtn) rankBtn.textContent = `Rank ${obj.rank}`;

    // ÌîÑÎ°úÌïÑ Î†åÎçî ÏöîÏ≤≠(ÏïÑÎûò 3-C-2ÏôÄ ÏÑ∏Ìä∏)
    window.dispatchEvent(new CustomEvent('profile:update'));
}


// Î™®Ìóò ÏÉÅÌÉú Ï†ÄÏû•ÌÇ§
const ADV_LS_KEY = 'adventureV1';

// Î≥¥Îìú(6√ó5) ‚Üí Ï†ÄÏû•
function saveAdventureState() {
    try {
        const state = {
            board: getBoardState(),
            enemy: {
                current: EnemyHP.current,
                max: EnemyHP.max,
                codes: currentEnemy.codes,
                tiers: currentEnemy.tiers,
                attr: currentEnemy.attr
            },
            ally: { current: HP.current, max: HP.max },
            turnMovesLeft,
            allies: allies.map(a => ({
                id: a.id,
                hp: a.hp,
                maxHp: a.maxHp,
                attack: a.attack,
                heal: a.heal,
                cooldownLeft: a.cooldownLeft || 0,
                cooldownMax: a.cooldownMax || 5
            }))
        };
        localStorage.setItem(ADV_LS_KEY, JSON.stringify(state));
    } catch { }
}

// Ï†ÄÏû•Î≥∏ ‚Üí Î≥¥Îìú/HP Î≥µÏõê
function applyBoardState(board) {
    const slots = document.querySelectorAll(".puzzle-slot");
    const rows = 5, cols = 6;
    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < cols; c++) {
            const idx = r * cols + c;
            const slot = slots[idx];
            const el = board[r][c];
            slot.dataset.element = el;
            resetSlotIcon(slot);
        }
    }
}

function restoreAdventureState() {
    try {
        const raw = localStorage.getItem(ADV_LS_KEY);
        if (!raw) return false;
        const s = JSON.parse(raw);
        if (!s || !Array.isArray(s.board)) return false;

        // üß© ÌçºÏ¶êÌåê Î≥µÏõê
        applyBoardState(s.board);

        // üêâ Ï†Å ÏÉÅÌÉú Î≥µÏõê
        if (s.enemy && typeof s.enemy.current === "number" && typeof s.enemy.max === "number") {
            EnemyHP.max = s.enemy.max;
            EnemyHP.current = Math.max(0, Math.min(s.enemy.max, s.enemy.current));
            EnemyHP.updateBar();

            if (s.enemy.codes && s.enemy.tiers && s.enemy.attr) {
                ["left", "center", "right"].forEach((pos, i) => {
                    const img = document.querySelector(`#monster-${pos} img`);
                    if (img) img.src = `enemy/${s.enemy.codes[i]}${s.enemy.tiers[i]}${s.enemy.attr}.png`;
                });
                window.currentEnemy = {
                    codes: s.enemy.codes,
                    tiers: s.enemy.tiers,
                    attr: String(s.enemy.attr)
                };
            }
        } else {
            EnemyHP.init(1000);
        }

        // ü©∏ ÏïÑÍµ∞ HP Î≥µÏõê
        if (s.ally) {
            HP.max = s.ally.max || HP.max;
            HP.current = Math.max(0, Math.min(HP.max, s.ally.current || HP.current));
            updateAllyHPBar();
        }

        // üß≠ ÌÑ¥ Ï†ïÎ≥¥ Î≥µÏõê
        if (typeof s.turnMovesLeft === "number") {
            turnMovesLeft = Math.max(0, Math.min(turnMovesMax, s.turnMovesLeft));
        }
        updateTurnGauge();

        // üß© ÏïÑÍµ∞ Ïø®ÌÉÄÏûÑ Î≥µÏõê
        if (s.allies && Array.isArray(s.allies)) {
            s.allies.forEach(saved => {
                const a = allies.find(x => x.id === saved.id);
                if (a) {
                    a.hp = saved.hp;
                    a.maxHp = saved.maxHp;
                    a.attack = saved.attack;
                    a.heal = saved.heal;
                    a.cooldownLeft =
                        (saved.cooldownLeft !== undefined && saved.cooldownLeft > 0)
                            ? saved.cooldownLeft
                            : a.cooldownMax;
                    a.cooldownMax = saved.cooldownMax || 5;

                    if (a.cooldownLeft > a.cooldownMax) {
                        a.cooldownLeft = a.cooldownMax;
                    }
                }
            });
        }
        updateAllAllyUI?.();

        // Îû≠ÌÅ¨/Î≤ÑÌäº Î≥µÏõê
        const profile = JSON.parse(localStorage.getItem("profileV1") || "{}") || {};
        const rank = Number(profile.rank || 1);
        const rankBtn = document.getElementById("btnToggleFooterZ");
        if (rankBtn) rankBtn.textContent = `Rank ${rank}`;
        const hdrRank = document.getElementById("headerRank");
        if (hdrRank) hdrRank.textContent = rank;

        return true;
    } catch (err) {
        console.warn("‚ö†Ô∏è restoreAdventureState Ïã§Ìå®:", err);
        return false;
    }
}

function clearAdventureState() {
    try { localStorage.removeItem(ADV_LS_KEY); } catch { }
}

function onEnemyDefeated() {
    // ‚úÖ Ïä§ÌÖåÏù¥ÏßÄ Ï¶ùÍ∞Ä
    const current = Number(localStorage.getItem('currentStage') || 1);
    localStorage.setItem('currentStage', current + 1);
    updateStageButtonText();

    // üïí Îû≠ÌÅ¨ ÏóÖ Î®ºÏ†Ä Ï≤òÎ¶¨
    bumpRank();

    // üíæ Í∏∞Ï°¥ Î™®Ìóò ÏÉÅÌÉú ÏßÄÏö∞Í∏∞ Ï†ÑÏóê ÏÉà Îû≠ÌÅ¨Ïö© ÏÑ∏ÌåÖ Ï§ÄÎπÑ
    const nextMax = EnemyHP.max + randomEnemyDelta();
    EnemyHP.init(nextMax);
    spawnEnemiesByStage();

    // ü©∏ HP Î∞è Ïä§ÌÇ¨ Ïø®ÌÉÄÏûÑ ÏôÑÏ†Ñ Ï¥àÍ∏∞Ìôî
    allies.forEach(a => {
        if (a) {
            a.hp = a.maxHp;
            a.cooldownLeft = a.cooldownMax;
            a.skillReady = false;
        }
    });
    HP.current = HP.max;
    updateAllyHPBar();
    updateAllAllyUI?.();

    // üîÑ Î™®Ìóò ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî (Ïù¥Ï†ú Ìï¥ÎèÑ Îê®)
    clearAdventureState();

    // üß≠ ÌÑ¥/Î≥¥Îìú Ï¥àÍ∏∞Ìôî
    initPuzzleBoard();
    turnMovesLeft = turnMovesMax;
    updateTurnGauge();

    // üíæ ÏÉà ÏÉÅÌÉú Ï†ÄÏû•
    saveAdventureState();
}

// ÏïÑÍµ∞ Ï†ÑÎ©∏ ‚Üí ÌçºÏ¶êÎßå Ï¥àÍ∏∞Ìôî
function onPartyDefeated() {
    clearAdventureState();
    initPuzzleBoard();                 // ÏÉà ÌçºÏ¶ê
    turnMovesLeft = turnMovesMax;
    allies.forEach(a => {
        if (a) {
            a.hp = a.maxHp;
            a.cooldownLeft = a.cooldownMax;
            a.skillReady = false;
        }
    });
    updateTurnGauge();
    saveAdventureState();
}

// Ï¥àÍ∏∞ ÏßÑÏûÖ Ïãú Ï†Å HP Î∞î ÏÑ∏ÌåÖ
document.addEventListener('DOMContentLoaded', () => {
    EnemyHP.init(1000);   // ‚Üê ÏãúÏûëÍ∞í. ÌïÑÏöîÏãú Îû≠ÌÅ¨/Ïä§ÌÖåÏù¥ÏßÄÏóê Îî∞Îùº Ï°∞Ï†ï
});

// === ÌçºÏ¶ê Ï¥àÍ∏∞Ìôî ===
const elements = ["l", "m", "n", "e", "w", "s"];

function initPuzzleBoard() {
    const slots = document.querySelectorAll(".puzzle-slot");
    slots.forEach(slot => {
        const element = elements[Math.floor(Math.random() * elements.length)];
        slot.dataset.element = element;
        slot.style.backgroundImage = `url("icons/${element}.png")`;
        slot.style.backgroundSize = "cover";
    });
}

// === ÌçºÏ¶ê Ïú†Ìã∏ Ìï®Ïàò ===
function areAdjacent(slot1, slot2) {
    const slots = Array.from(document.querySelectorAll(".puzzle-slot"));
    const index1 = slots.indexOf(slot1);
    const index2 = slots.indexOf(slot2);

    const cols = 6; // 6Ïó¥
    const row1 = Math.floor(index1 / cols), col1 = index1 % cols;
    const row2 = Math.floor(index2 / cols), col2 = index2 % cols;

    //ÎåÄÍ∞ÅÏÑ† ÌóàÏö©return Math.abs(row1 - row2) <= 1 && Math.abs(col1 - col2) <= 1;
    return (
        (row1 === row2 && Math.abs(col1 - col2) === 1) || // Ï¢åÏö∞
        (col1 === col2 && Math.abs(row1 - row2) === 1)    // ÏÉÅÌïò
    );
}

function swapSlots(slot1, slot2) {
    const elem1 = slot1.dataset.element;
    const elem2 = slot2.dataset.element;

    // ÌÑ¥ ÏãúÏûë: ÌÇ§Í∞Ä 0Ïù¥Î©¥ ÏãúÏûë ÏûêÏ≤¥ Ï∞®Îã® (Ï∞®Í∞êÏùÄ ÌÑ¥ Ï¢ÖÎ£å Ïãú)
    if (turnMovesLeft === turnMovesMax) {
        if (getRoseTotalNow() <= 0) {
            return;
        }
    }

    // === Îç∞Ïù¥ÌÑ∞ ÍµêÌôò ===
    slot1.dataset.element = elem2;
    slot2.dataset.element = elem1;
    resetSlotIcon(slot1);
    resetSlotIcon(slot2);

    moveCount++;
    turnMovesLeft--;
    updateTurnGauge();

    // ‚úÖ Í∏∞Ï°¥: ÎßàÏßÄÎßâ Ïù¥Îèô ÌõÑ ÌÑ¥ Ï¢ÖÎ£å ÏãúÎèÑ
    if (turnMovesLeft <= 0) {
        if (!isResolving) {
            isResolving = true;
            turnDamageTotal = 0;  // ‚úÖ Ïù¥Î≤à ÌÑ¥ Ìï©Í≥Ñ Ï¥àÍ∏∞Ìôî
            resolveBoard();
        }
    }

    // Îß§Ïπ≠ Í≤ÄÏÇ¨
    const board = getBoardState();
    const matches = findMatches(board);
    if (matches.length > 0) {
        applyHighlight(flattenMatches(matches));
    }
}

function getRoseTotalNow() {
    if (window.Rewards && window.Rewards._state) {
        return Number(window.Rewards._state.roseTotal || 0);
    }
    try {
        const obj = JSON.parse(localStorage.getItem('rewardsV1') || '{}') || {};
        return Number(obj.roseTotal || 0);
    } catch { return 0; }
}

let focusedSlot = null;

// Ïä¨Î°Ø ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".puzzle-slot").forEach(slot => {
        slot.addEventListener("click", (e) => {
            e.stopPropagation();

            if (focusedSlot) {
                if (areAdjacent(focusedSlot, slot)) {
                    swapSlots(focusedSlot, slot);
                    resetSlotIcon(focusedSlot);
                    focusedSlot.classList.remove("focused");
                    focusedSlot = null;
                    return;
                }
                resetSlotIcon(focusedSlot);
                focusedSlot.classList.remove("focused");
            }

            focusedSlot = slot;
            focusedSlot.classList.add("focused");
        });
    });
});



// Î∞îÍπ• ÌÅ¥Î¶≠ Ïãú Ìè¨Ïª§Ïä§ Ìï¥Ï†ú
document.addEventListener("click", () => {
    if (focusedSlot) {
        resetSlotIcon(focusedSlot);
        focusedSlot.classList.remove("focused");
        focusedSlot = null;
    }
});

function resetSlotIcon(slot) {
    if (!slot) return;

    const element = slot.dataset.element;
    if (!element || element === "undefined") {
        slot.style.backgroundImage = "none";
        return;
    }

    slot.style.backgroundImage = `url("icons/${element}.png")`;
    slot.style.backgroundSize = "cover";
}

// ÏÉÅ, Ìïò, Ï¢å, Ïö∞, ‚Üò, ‚Üñ, ‚Üô, ‚Üó
const directions = [
    [0, 1], [0, -1], [1, 0], [-1, 0],
    [1, 1], [-1, -1], [1, -1], [-1, 1]
];

// Îß§Ïπ≠ ÌÉêÏÉâ Ìï®Ïàò
function findMatches(board) {
    const matches = [];
    const rows = 5, cols = 6;
    const directions = [[0, 1], [1, 0], [1, 1], [1, -1]];

    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < cols; c++) {
            const element = board[r][c];
            if (!element) continue;

            directions.forEach(([dr, dc]) => {
                let group = [[r, c]];

                // Í∞ÄÎ°ú(0,1), ÏÑ∏Î°ú(1,0)Îäî 3Í∞ú Í≤ÄÏÇ¨
                let required = (dr === 0 || dc === 0) ? 3 : 4;
                for (let i = 1; i < required; i++) {
                    const nr = r + dr * i, nc = c + dc * i;
                    if (nr < 0 || nr >= rows || nc < 0 || nc >= cols) break;
                    if (board[nr][nc] === element) {
                        group.push([nr, nc]);
                    } else break;
                }

                // Î∞©Ìñ•Î≥ÑÎ°ú Îã§Î•∏ Í∏∞Ï§Ä Ï†ÅÏö©
                if ((dr === 0 || dc === 0) && group.length >= 3) {
                    matches.push(group);
                }
                if ((dr !== 0 && dc !== 0) && group.length >= 4) {
                    matches.push(group);
                }
            });
        }
    }
    return matches;
}

// ÌçºÏ¶êÌåêÏùÑ 2Ï∞®Ïõê Î∞∞Ïó¥Î°ú Íµ¨ÏÑ±ÌïòÎäî Ìó¨Ìçº (dataset.element Í∏∞Î∞ò)
function getBoardState() {
    const slots = document.querySelectorAll(".puzzle-slot");
    const rows = 5; // ÏÑ∏Î°ú Í≥†Ï†ï
    const cols = 6; // Í∞ÄÎ°ú Í≥†Ï†ï
    const board = [];

    for (let r = 0; r < rows; r++) {
        const row = [];
        for (let c = 0; c < cols; c++) {
            const idx = r * cols + c;
            row.push(slots[idx].dataset.element);
        }
        board.push(row);
    }
    return board;
}

function flattenMatches(matches) {
    const set = new Set();
    matches.forEach(group => {
        group.forEach(([r, c]) => set.add(`${r},${c}`));
    });
    return Array.from(set).map(str => str.split(",").map(Number));
}

// Îß§Ïπ≠Îêú Ïπ∏Ïóê ÌïòÏù¥ÎùºÏù¥Ìä∏ ÌÅ¥ÎûòÏä§ Î∂ÄÏó¨
function applyHighlight(matches) {
    const allSlots = document.querySelectorAll(".puzzle-slot");

    if (matches.length === 0) {
        return; // Í∏∞Ï°¥ highlight Ïú†ÏßÄ
    }

    // Í∏∞Ï°¥ ÌïòÏù¥ÎùºÏù¥Ìä∏ Ï†úÍ±∞ ÌõÑ Îã§Ïãú Ï†ÅÏö©
    allSlots.forEach(slot => slot.classList.remove("highlight"));

    matches.forEach(([r, c]) => {
        const idx = r * 6 + c; // 6Ïó¥ Í∏∞Ï§Ä Ïù∏Îç±Ïä§
        const slot = allSlots[idx];
        if (slot) slot.classList.add("highlight");
    });
}

const board = getBoardState();
const matches = findMatches(board);
applyHighlight(flattenMatches(matches));

window.addEventListener("load", () => {
    const board = getBoardState();
    const matches = findMatches(board);
    applyHighlight(flattenMatches(matches));
});

function clearMatches(matches) {
    const allSlots = document.querySelectorAll(".puzzle-slot");

    matches.forEach(([r, c]) => {
        const idx = r * 6 + c;
        const slot = allSlots[idx];
        if (slot) {
            // Îç∞Ïù¥ÌÑ∞ÏôÄ ÏïÑÏù¥ÏΩò ÎπÑÏõÄ
            slot.dataset.element = "";
            slot.style.backgroundImage = "none";
            slot.classList.remove("highlight");
        }
    });
}

function applyGravity() {
    const rows = 5;
    const cols = 6;
    const allSlots = document.querySelectorAll(".puzzle-slot");

    for (let c = 0; c < cols; c++) {
        // üîΩ 1) ÌòÑÏû¨ Ïó¥Ïùò Î∏îÎ°ùÎì§ÏùÑ ÏïÑÎûòÎ°ú ÏïïÏ∂ï
        const stack = [];
        for (let r = 0; r < rows; r++) {
            const idx = r * cols + c;
            const slot = allSlots[idx];
            if (slot.dataset.element) {
                stack.push(slot.dataset.element);
            }
        }

        // üîΩ 2) ÏïÑÎûò ÌñâÎ∂ÄÌÑ∞ Îã§Ïãú Ï±ÑÏõÄ
        for (let r = rows - 1; r >= 0; r--) {
            const idx = r * cols + c;
            const slot = allSlots[idx];

            if (stack.length > 0) {
                const elem = stack.pop();
                slot.dataset.element = elem;
                slot.style.backgroundImage = `url("icons/${elem}.png")`;
                slot.style.backgroundSize = "cover";
            } else {
                // ÎπÑÏóàÏúºÎ©¥ ÏÉà ÎûúÎç§ ÏÉùÏÑ±
                const newElem = getRandomElement();
                slot.dataset.element = newElem;
                slot.style.backgroundImage = `url("icons/${newElem}.png")`;
                slot.style.backgroundSize = "cover";
            }
        }
    }
}

function getRandomElement() {
    const elements = ["l", "s", "m", "w", "e", "n"]; // ÏõêÏÜå Ï¢ÖÎ•ò
    const rand = Math.floor(Math.random() * elements.length);
    return elements[rand];
}
function refillTopRow() {
    const cols = 6; // 0~5
    const allSlots = document.querySelectorAll(".puzzle-slot");

    for (let c = 0; c < cols; c++) {
        const idx = 0 * cols + c;
        const slot = allSlots[idx];

        if (!slot.dataset.element) { // ÎπÑÏñ¥ÏûàÏúºÎ©¥ ÎûúÎç§ ÏõêÏÜå Ìà¨ÏûÖ
            const newElem = getRandomElement();
            slot.dataset.element = newElem;
            slot.style.backgroundImage = `url("icons/${newElem}.png")`;
        }
    }
}

function resolveBoard() {
    let boardChanged = true;

    while (boardChanged) {
        const board = getBoardState();
        const matches = findMatches(board);
        const flat = flattenMatches(matches);

        if (flat.length > 0) {
            clearMatches(flat);     // Ï†úÍ±∞
            applyGravity();         // Ï§ëÎ†•
            refillTopRow();         // Î¶¨ÌïÑ
        } else {
            boardChanged = false;   // Îß§Ïπ≠ ÏóÜÏúºÎ©¥ Î∞òÎ≥µ Ï¢ÖÎ£å
        }
    }

    // Î™®Îì† Ïó∞ÏáÑ ÎÅùÎÇú ÌõÑ Ïπ¥Ïö¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
    moveCount = 0;
}

function resolveBoardStep() {
    const board = getBoardState();
    const matches = findMatches(board);
    const flat = flattenMatches(matches);

    if (flat.length > 0) {
        // 1) ÌïòÏù¥ÎùºÏù¥Ìä∏ ÌëúÏãú
        applyHighlight(flat);

        // ‚úÖ 2) ÏõêÏÜåÎ≥Ñ Îß§Ïπ≠ Í∞úÏàò Í≥ÑÏÇ∞
        const matchResults = {};
        flat.forEach(([r, c]) => {
            const idx = r * 6 + c;
            const slot = document.querySelectorAll(".puzzle-slot")[idx];
            const elem = slot.dataset.element;
            if (!elem) return;
            matchResults[elem] = (matchResults[elem] || 0) + 1;
        });

        // ‚úÖ 3) Ï†ÑÌà¨ Ï≤òÎ¶¨ Ìï®Ïàò Ìò∏Ï∂ú
        applyCombatResults(matchResults);

        // 4) Ïû†Íπê Î≥¥Ïó¨Ï§Ä Îí§ Ìè≠Ìåå
        setTimeout(() => {
            clearMatches(flat);

            // 5) Ï§ëÎ†• Ï†ÅÏö©
            setTimeout(() => {
                applyGravity();

                // 6) Î¶¨ÌïÑ ÌõÑ Ïû¨Ïä§Ï∫î
                setTimeout(() => {
                    resolveBoardStep();
                }, 300);
            }, 500);
        }, 300);
    } else {
        // Î™®Îì† Ïó∞ÏáÑ Ï¢ÖÎ£å

        // üîª Ïó¨Í∏∞ÏóêÏÑú Ìïú ÌÑ¥ ÏÜåÎπÑ Ï≤òÎ¶¨ (Ï†ïÌôïÌûà 1Ìöå)
        if (!consumeTurnKey()) {
            // ÌÇ§Í∞Ä Î™®ÏûêÎùºÎ©¥ Îã§Ïùå ÌÑ¥ ÏãúÏûë Î∂àÍ∞ÄÌïòÍ≤å ÏïàÎÇ¥ (ÏõêÌïòÎ©¥ Ï∂îÍ∞Ä Ï≤òÎ¶¨)
            console.warn('Î°úÏ¶àÌÇ§ Î∂ÄÏ°±: Îã§Ïùå ÌÑ¥ ÏãúÏûë Î∂àÍ∞Ä');
        }

        // ‚úÖ Ïù¥Î≤à ÌÑ¥ Ï¥ù Îç∞ÎØ∏ÏßÄÎ•º Ï†ÅÏóêÍ≤å Ï†ÅÏö©
        if (turnDamageTotal > 0) {
            EnemyHP.damage(turnDamageTotal);
            turnDamageTotal = 0;   // Îã§Ïùå ÌÑ¥ ÎåÄÎπÑ Ï¥àÍ∏∞Ìôî
        }

        handleTurnAdvance();  
        moveCount = 0;

        // (ÏûàÎäî Í≤ΩÏö∞) Ïù¥Î≤à ÌÑ¥ Î°úÍ∑∏ Ï∂úÎ†•/Ï¥àÍ∏∞Ìôî
        combatLog.forEach(line => console.log(line));
        combatLog = [];



        // ‚úÖ Îã§Ïùå ÌÑ¥ Ï§ÄÎπÑ: Í≤åÏù¥ÏßÄ/ÌëúÏãú Î¶¨ÏÖã
        turnMovesLeft = turnMovesMax;
        updateTurnGauge();

        // ‚úÖ Ïù¥Î≤à ÌÑ¥ Ï¥ù Îç∞ÎØ∏ÏßÄÎ•º Ï†ÅÏóêÍ≤å Ï†ÅÏö©
        if (turnDamageTotal > 0) {
            EnemyHP.damage(turnDamageTotal);
            turnDamageTotal = 0;
        }

        // ‚úÖ Ïó∞ÏáÑ/Ï†ïÏÇ∞Ïù¥ ÎÅùÎÇú 'ÏïàÏ†ï ÏÉÅÌÉú'ÏóêÏÑú Ï†ÄÏû•
        saveAdventureState();

        // ‚úÖ resolveBoard Ïû¨ÏßÑÏûÖ Í∞ÄÎä• ÏÉÅÌÉúÎ°ú Î≥µÍ∑Ä
        isResolving = false;
    }
}

function consumeTurnKey() {
    // RewardsÍ∞Ä Ï§ÄÎπÑÎêú Ï†ïÏÉÅ Í≤ΩÎ°ú
    if (window.Rewards && typeof window.Rewards.consumeRose === 'function') {
        const ok = window.Rewards.consumeRose(1);
        if (!ok) {
            return false;
        }
        const roseUI = document.getElementById('roseKeyCount');
        if (roseUI) roseUI.textContent = window.Rewards._state.roseTotal;
        return true;
    }

    // üîÅ Fallback: Rewards ÎØ∏Ï¥àÍ∏∞Ìôî ÏãúÏóêÎèÑ 'rewardsV1'Îßå ÏàòÏ†ï (Îã®Ïùº ÏÜåÏä§ Ïú†ÏßÄ)
    try {
        const obj = JSON.parse(localStorage.getItem('rewardsV1') || '{}') || {};
        const cur = Number(obj.roseTotal || 0);
        if (cur <= 0) {
            return false;
        }
        obj.roseTotal = cur - 1;
        localStorage.setItem('rewardsV1', JSON.stringify(obj));
        // Ï†ÑÏó≠ UI ÎèôÍ∏∞Ìôî(Ìó§Îçî/Î™®Ìóò ÎèôÏãú Î∞òÏòÅ)
        window.dispatchEvent(new CustomEvent('rewards:update'));
        const roseUI = document.getElementById('roseKeyCount');
        if (roseUI) roseUI.textContent = obj.roseTotal;
        return true;
    } catch {
        alert('Î°úÏ¶àÌÇ§ Ï∞®Í∞ê Ï§ë Ïò§Î•ò');
        return false;
    }
}


// Í∏∞Ï°¥ resolveBoard Ìò∏Ï∂úÎ∂ÄÏóêÏÑú Ïù¥ Ìï®ÏàòÎ°ú ÍµêÏ≤¥
function resolveBoard() {
    resolveBoardStep();
}


// ÏïÑÍµ∞ ÌåÄ Îç∞Ïù¥ÌÑ∞ Î∞∏Îü∞Ïä§
const allies = [
    { id: 1, name: "Î¶¨Îçî", element: "", attack: 50, heal: 5, maxHp: 1000, hp: 1000 },
    { id: 2, name: "ÌòÑÎ¨¥", element: "n", attack: 10, heal: 5, maxHp: 100, hp: 100 },
    { id: 3, name: "Ï£ºÏûë", element: "s", attack: 10, heal: 5, maxHp: 100, hp: 100 },
    { id: 4, name: "Ï≤≠Î£°", element: "e", attack: 10, heal: 5, maxHp: 100, hp: 100 },
    { id: 5, name: "Î∞±Ìò∏", element: "w", attack: 10, heal: 5, maxHp: 100, hp: 100 },
    { id: 6, name: "Í∏∞Î¶∞", element: "m", attack: 10, heal: 5, maxHp: 100, hp: 100 }
];

// Ï†ÑÌà¨ Î°úÍ∑∏ Í¥ÄÎ¶¨
let combatLog = [];

function getTotalHP() {
    return allies.slice(1).reduce((sum, u) => sum + u.hp, 0);
}

// ===== ÏïÑÍµ∞ HPÎ∞î ÏóÖÎç∞Ïù¥Ìä∏ =====
function updateAllyHPBar() {
    const fill = document.querySelector(".hp-fill");
    const text = document.querySelector(".hp-text");
    const percent = (HP.current / HP.max) * 100;

    if (fill) fill.style.width = percent + "%";
    if (text) text.textContent = `${HP.current} / ${HP.max}`;
}

window.addEventListener('DOMContentLoaded', () => {
    const roseUI = document.getElementById('roseKeyCount');
    let val = 0;
    if (window.Rewards && window.Rewards._state) {
        val = Number(window.Rewards._state.roseTotal || 0);
    } else {
        try { val = Number(JSON.parse(localStorage.getItem('rewardsV1') || '{}').roseTotal || 0); }
        catch { val = 0; }
    }
    if (roseUI) roseUI.textContent = val;
});

// ====================== ÏÜçÏÑ± ÏÉÅÏÑ± (ÏïÑÍµ∞ Í∏∞Ï§Ä, ÏÉÅÎåÄÎì± ÏßÄÏ†ï ÏõêÎ≥∏ Ïú†ÏßÄ) ======================
const ELEMENT_MULTIPLIER = {
    n: { m: 2, n: 0.5, default: 1 },
    s: { w: 2, e: 0.5, default: 1 },
    e: { s: 2, w: 0.5, default: 1 },
    w: { e: 2, s: 0.5, default: 1 },
    m: { n: 2, m: 0.5, default: 1 }
};

// ====================== Ïà´Ïûê ‚Üí Î¨∏Ïûê Îß§Ìïë ======================
const ATTR_NUM_TO_LETTER = {
    '1': 'n', // Ïñ¥Îë†(ÌòÑÎ¨¥)
    '2': 's', // Î∂à(Ï£ºÏûë)
    '3': 'e', // Î¨º(Ï≤≠Î£°)
    '4': 'w', // Î∞îÎûå(Î∞±Ìò∏)
    '5': 'm'  // Îπõ(Í∏∞Î¶∞)
};

// ====================== Î∞∞Ïú® Í≥ÑÏÇ∞ Ìï®Ïàò ======================
function getDamageMultiplier(allyAttr, enemyAttr) {
    const table = ELEMENT_MULTIPLIER[allyAttr];
    if (!table) return 1;
    return table[enemyAttr] || table.default;
}

// ====================== Ï†ÑÌà¨ Í≤∞Í≥º Ï≤òÎ¶¨ ======================
function applyCombatResults(matches) {
    let totalDamage = 0;
    let totalHeal = 0;
    let totalIntendedHeal = 0;
    const effects = [];

    let totalMatchCount = 0;

    // üß≠ Ï†Å ÏÜçÏÑ± Ï†ïÍ∑úÌôî (Ïà´Ïûê ‚Üí Î¨∏Ïûê)
    let enemyAttr = window.currentEnemy?.attr ?? 'n';
    if (typeof enemyAttr === 'number' || /^\d+$/.test(String(enemyAttr))) {
        const key = String(enemyAttr);
        enemyAttr = ATTR_NUM_TO_LETTER[key] || String(enemyAttr);
    } else {
        enemyAttr = String(enemyAttr);
    }

    console.log('üéØ [DEBUG] enemyAttr(normalized):', enemyAttr);

    for (const [element, count] of Object.entries(matches)) {
        if (!count) continue;

        // üíñ ÌöåÎ≥µ ÏÜçÏÑ±
        if (element === "l") {
            allies.slice(1).forEach((u) => {
                const intendedHeal = u.heal * count;
                const actualHeal = Math.min(intendedHeal, u.maxHp - u.hp);
                totalIntendedHeal += intendedHeal;
                if (actualHeal > 0) {
                    u.hp += actualHeal;
                    totalHeal += actualHeal;
                }
            });
            HP.changeHP(totalHeal);
        }

        // ‚öîÔ∏è Í≥µÍ≤© ÏÜçÏÑ±
        else {
            const ally = allies.find(u => u && u.element === element);
            if (ally) {
                // ‚úÖ ÏïÑÍµ∞ Í∏∞Ï§Ä ÏÉÅÏÑ± Ï†ÅÏö©
                const mult = getDamageMultiplier(ally.element, enemyAttr);
                const baseDamage = ally.attack * count;
                const damage = Math.round(baseDamage * mult);

                totalDamage += damage;
                effects.push(() => showCombatEffect(ally.id, damage, false));

                console.log(`‚öîÔ∏è [${ally.name}] ‚Üí attr:${ally.element}, enemy:${enemyAttr}, count:${count}, mult:${mult}, dmg:${damage}`);
            }
            totalMatchCount += count;
        }
    }

    // üëë Î¶¨Îçî(Î¨¥ÏÜçÏÑ±)
    const leader = allies.find(u => u && !u.element);
    if (leader && totalMatchCount > 0) {
        const damage = leader.attack * totalMatchCount;
        totalDamage += damage;
        effects.push(() => showCombatEffect(leader.id, damage, false));
    }

    // ‚úÖ ÎàÑÏ†Å ÌîºÌï¥Îßå Í∏∞Î°ù (Ï¶âÏãú Î∞òÏòÅ Í∏àÏßÄ)
    turnDamageTotal += totalDamage;

    // ‚ù§Ô∏è ÌöåÎ≥µ Ïù¥ÌéôÌä∏
    if (totalIntendedHeal > 0) {
        requestAnimationFrame(() => showHealTotalEffect(totalIntendedHeal));
    }

    // ‚ú® Í≥µÍ≤© Ïù¥ÌéôÌä∏
    requestAnimationFrame(() => effects.forEach(fn => fn()));

    // UI Í∞±Ïã†
    updateAllyHPBar();
}


function showHealTotalEffect(value) {
    const hpBar = document.querySelector(".hp-bar");
    if (!hpBar) return;

    const indicator = document.createElement("div");
    indicator.className = "heal-indicator-bar";
    indicator.textContent = `+${value}`;

    // üåü bodyÏóê ÏßÅÏ†ë Î∂ôÏûÑ
    document.body.appendChild(indicator);

    // üåü ÏúÑÏπò Í≥ÑÏÇ∞ (ÌûêÎ∞îÏùò Ï§ëÏïô ÏúÑ)
    const rect = hpBar.getBoundingClientRect();
    indicator.style.left = `${rect.left + rect.width / 2}px`;
    indicator.style.top = `${rect.top - 24}px`;

    setTimeout(() => {
        indicator.remove();
    }, 1200);
}


// ÏõêÏÜå ‚Üí ÏïÑÍµ∞ Ïä¨Î°Ø Îß§Ìïë
const elementMap = {
    l: null, // life = ÌöåÎ≥µ Ï†ÑÏö© (Ï∫êÎ¶≠ÌÑ∞ ÏóÜÏùå)
    m: 6,    // mid = Í∏∞Î¶∞ (Ïùº) ‚Üí 6Î≤à Ïä¨Î°Ø
    n: 2,    // north = ÌòÑÎ¨¥ (Ïõî) ‚Üí 2Î≤à Ïä¨Î°Ø
    e: 4,    // east = Ï≤≠Î£° (Ïàò) ‚Üí 4Î≤à Ïä¨Î°Ø
    w: 5,    // west = Î∞±Ìò∏ (Î™©) ‚Üí 5Î≤à Ïä¨Î°Ø
    s: 3     // south = Ï£ºÏûë (Ìôî) ‚Üí 3Î≤à Ïä¨Î°Ø
};
// ÏïÑÍµ∞ Ï¥ù HP Í≥ÑÏÇ∞
function sumAlliesHp() {
    if (!Array.isArray(allies)) return 0;
    return allies.reduce((sum, ally) => {
        if (!ally || typeof ally.hp !== "number") return sum;
        return sum + ally.hp;
    }, 0);
}

// Ï¥àÍ∏∞ ÏÑ∏ÌåÖ
document.addEventListener("DOMContentLoaded", () => {
    const baseHp = 0;
    const alliesHp = sumAlliesHp();
    HP.max = baseHp + alliesHp;
    HP.current = HP.max; // ÏãúÏûë Ïãú ÌíÄÏ≤¥Î†•
    HP.updateBar();
});

function updateTurnGauge() {
    const segments = document.querySelectorAll(".skill-segment");
    segments.forEach((seg, index) => {
        // turnMovesLeft ÎßåÌÅº ÏôºÏ™ΩÎ∂ÄÌÑ∞ ÏºúÏßê
        if (index < turnMovesLeft) {
            seg.classList.add("active");
        } else {
            seg.classList.remove("active");
        }
    });
}
updateTurnGauge();

function showCombatEffect(index, value, isHeal = false) {
    const slots = document.querySelectorAll(".ally-slot");
    const target = slots[index - 1];
    if (!target) return;

    const indicator = document.createElement("div");
    indicator.className = isHeal ? "heal-indicator" : "damage-indicator";
    indicator.textContent = `${isHeal ? '+' : ''}${value}`;
    target.appendChild(indicator);

    // Ïï†ÎãàÎ©îÏù¥ÏÖò ÌõÑ Ï†úÍ±∞
    setTimeout(() => {
        indicator.remove();
    }, 2500);
}

// Ï†ÑÏó≠Ïóê Ïù¥ÎØ∏ ÏûàÏúºÎ©¥ ÏÉùÎûµ Í∞ÄÎä•
let isDefeated = false;

function applyEnemyAttack(damageValue) {
    // üõ°Ô∏è Î¨¥Ï†Å ÌåêÏ†ï (Í∞ÄÏû• Î®ºÏ†Ä ÏàòÌñâ)
    if (window.nextTurnInvincible > 0) {
        console.log("üõ°Ô∏è ÏõîÍ¥ëÏàòÌò∏ Î∞úÎèô! Ïù¥Î≤à ÌÑ¥ ÌîºÌï¥ 0");
        // ‚ë† Ïù¥Î≤à ÌÑ¥ Í≥µÍ≤©ÏùÄ Î¨¥Ïãú ÌïòÍ≥†
        // ‚ë° ÌÑ¥ Ïù¥ ÎÅùÎÇú Îí§(Ï¶â handleTurnAdvanceÏóêÏÑú) Í∞êÏÜåÏãúÌÇ§Í≤å ÌïúÎã§
        return;
    }

    // ‚öîÔ∏è Ïã§Ï†ú Îç∞ÎØ∏ÏßÄ Ï†ÅÏö©
    HP.current = Math.max(0, HP.current - damageValue);
    HP.updateBar();

    // üí• ÏãúÍ∞Å Ìö®Í≥º
    const hpText = document.querySelector(".hp-text");
    if (hpText) {
        const indicator = document.createElement("div");
        indicator.className = "damage-indicator total";
        indicator.textContent = `-${damageValue}`;
        hpText.appendChild(indicator);
        setTimeout(() => indicator.remove(), 2000);
    }

    // üíÄ Ï†ÑÎ©∏ ÌåêÏ†ï
    if (!isDefeated && HP.current <= 0) {
        isDefeated = true;
        setTimeout(() => {
            if (confirm("üíÄ ÏïÑÍµ∞Ïù¥ Ï†ÑÎ©∏ÌñàÏäµÎãàÎã§!")) {
                const KEY = 'profileV1';
                let profile = {};
                try { profile = JSON.parse(localStorage.getItem(KEY) || '{}') || {}; } catch { }
                const curRank = Number(profile.rank || 1);
                profile.rank = curRank > 3 ? curRank - 3 : 1;
                localStorage.setItem(KEY, JSON.stringify(profile));

                // Ï≤¥Î†• ÏôÑÏ†Ñ ÌöåÎ≥µ
                HP.current = HP.max;
                HP.updateBar();
                EnemyHP.current = EnemyHP.max;
                EnemyHP.updateBar();

                const rankBtn = document.getElementById('btnToggleFooterZ');
                if (rankBtn) rankBtn.textContent = `Rank ${profile.rank}`;

                if (typeof saveAdventureState === 'function') saveAdventureState();
                isDefeated = false;
            }
        }, 500);
    }
}

/* ======================= Allies: Skill Cooldown Fields ======================= */
/* Í∞Å Ï∫êÎ¶≠ÌÑ∞Ïóê Ïä§ÌÇ¨ Ïø®ÌÉÄÏûÑ(ÏµúÎåÄ/ÎÇ®ÏùÄ), Ï§ÄÎπÑ Ïó¨Î∂Ä, Ïû†Í∏à Ïó¨Î∂Ä ÌïÑÎìú Î∂ÄÏó¨ */
const SKILL_COOLDOWN_DEFAULTS = {
    1: 7,   // Î¶¨Îçî: 7ÌÑ¥
    2: 3,   // ÌòÑÎ¨¥: 3ÌÑ¥
    3: 4,   // Ï£ºÏûë: 4ÌÑ¥
    4: 5,   // Ï≤≠Î£°: 5ÌÑ¥ 
    5: 6,   // Î∞±Ìò∏: 6ÌÑ¥
    6: 7    // Í∏∞Î¶∞: 7ÌÑ¥
};

allies.forEach(a => {
    const max = SKILL_COOLDOWN_DEFAULTS[a.id] ?? 0;
    a.cooldownMax = max;
    a.cooldownLeft = max > 0 ? max : 0;
    a.skillReady = false;
    a.locked = false;   // Ïû†Í∏à/Î¥âÏù∏ ÏÉÅÌÉú Í∏∞Î≥∏ false
});

/* ======================= Ally UI Overlays & Main Click ======================= */
/* ally-slot ÏúÑÏóê 2Í∞úÏùò Ïò§Î≤ÑÎ†àÏù¥Î•º ÎèôÏ†ÅÏúºÎ°ú Î∂ÄÏ∞©:
   - LockOverlay: Ïû†Í∏à Ïãú ÏïÑÏù¥ÏΩò Í∞ÄÎ¶º/ÌÅ¥Î¶≠ Ï∞®Îã®
   - SkillHalo: Ïä§ÌÇ¨ Ï§ÄÎπÑ Ïãú Î©îÏπ¥Î∏îÎ£® ÌÖåÎëêÎ¶¨(ÏãúÍ∞Å Ï†ÑÏö©, Ìè¨Ïù∏ÌÑ∞ ÌÜµÍ≥º)
   Î©îÏù∏ ÌÅ¥Î¶≠: Ïû†Í∏àÏù¥Î©¥ Î¨¥Ïãú, Ï§ÄÎπÑÎ©¥ Ïä§ÌÇ¨Ï∞Ω, ÏïÑÎãàÎ©¥ ÏÉÅÌÉúÏ∞Ω */

function initAllyOverlays() {
    const slots = document.querySelectorAll(".ally-slot");
    slots.forEach((slot, idx) => {
        const ally = allies[idx]; if (!ally) return;

        // Ïû†Í∏à Ïò§Î≤ÑÎ†àÏù¥
        let lock = slot.querySelector(".ally-lock-overlay");
        if (!lock) {
            lock = document.createElement("div");
            lock.className = "ally-lock-overlay";
            Object.assign(lock.style, {
                position: "absolute", inset: "0", background: "rgba(0,0,0,0.65)",
                display: "none", zIndex: "3", backdropFilter: "blur(1px)",
                pointerEvents: "auto" // Ïû†Í∏à Ïãú ÌÅ¥Î¶≠ Ï∞®Îã®
            });
            // Ïû†Í∏à ÏïÑÏù¥ÏΩò(Í∞ÑÎã®)
            const icon = document.createElement("div");
            Object.assign(icon.style, {
                position: "absolute", left: "50%", top: "50%", transform: "translate(-50%,-50%)",
                fontSize: "20px", color: "#ddd"
            });
            icon.textContent = "üîí";
            lock.appendChild(icon);
            slot.style.position = slot.style.position || "relative";
            slot.appendChild(lock);
        }

        // Ïä§ÌÇ¨ Ï§ÄÎπÑ ÌÖåÎëêÎ¶¨
        let halo = slot.querySelector(".ally-skill-halo");
        if (!halo) {
            halo = document.createElement("div");
            halo.className = "ally-skill-halo";
            Object.assign(halo.style, {
                position: "absolute", inset: "0", border: "2px solid #00B8FF",
                borderRadius: "10px", boxShadow: "0 0 12px #00B8FF",
                display: "none", zIndex: "2", pointerEvents: "none" // ÌÅ¥Î¶≠ ÌÜµÍ≥º
            });
            slot.style.position = slot.style.position || "relative";
            slot.appendChild(halo);
        }

        // Î©îÏù∏ ÌÅ¥Î¶≠(Î≤ÑÌäº Ïó≠Ìï†)
        slot.addEventListener("click", () => {
            if (ally.locked) return; // Î¥âÏù∏ Ïãú Î¨¥Ïãú
            if (ally.cooldownMax > 0 && ally.skillReady) {
                openSkillWindow(ally); // Ïä§ÌÇ¨Ï∞Ω
            } else {
                openStatusWindow(ally); // ÏÉÅÌÉúÏ∞Ω
            }
        });
    });

    updateAllAllyUI();
}

/* ======================= UI State Updates ======================= */
function updateAllAllyUI() {
    const slots = document.querySelectorAll(".ally-slot");
    slots.forEach((slot, idx) => updateAllyUI(slot, allies[idx]));
}

function updateAllyUI(slot, ally) {
    if (!slot || !ally) return;
    const lock = slot.querySelector(".ally-lock-overlay");
    const halo = slot.querySelector(".ally-skill-halo");

    // Ïû†Í∏à ÌëúÏãú
    if (lock) lock.style.display = ally.locked ? "block" : "none";

    // Ïä§ÌÇ¨ Ï§ÄÎπÑ ÌëúÏãú(ÍπúÎπ°ÏûÑ)
    if (halo) {
        if (ally.skillReady) {
            halo.style.display = "block";
            halo.style.animation = "allyHaloPulse 1s infinite";
        } else {
            halo.style.display = "none";
            halo.style.animation = "none";
        }
    }
}

/* ======================= Cooldown Progress & Skill Use ======================= */
/* ÌÑ¥ Ï¢ÖÎ£å Ïãú Ìò∏Ï∂ú: Ïø®ÌÉÄÏûÑ ÏßÑÌñâ & Ï§ÄÎπÑ ÏÉÅÌÉú Í∞±Ïã† */
function progressSkillCooldowns() {
    allies.forEach(a => {
        if (!a || a.locked || a.cooldownMax <= 0) return;
        if (a.cooldownLeft > 0) {
            a.cooldownLeft--;
            if (a.cooldownLeft === 0) a.skillReady = true;
        }
    });
    updateAllAllyUI();
}

/* Ïä§ÌÇ¨ ÏÇ¨Ïö© Ïãú Ìò∏Ï∂ú: Ïø®ÌÉÄÏûÑ Î¶¨ÏÖã */
function consumeSkill(ally) {
    if (!ally || ally.cooldownMax <= 0) return;
    ally.skillReady = false;
    ally.cooldownLeft = ally.cooldownMax;
    updateAllAllyUI();
}

/* Ïû†Í∏à/Î¥âÏù∏ ÌÜ†Í∏Ä(Ïô∏Î∂Ä ÏãúÏä§ÌÖúÏóêÏÑú Ìò∏Ï∂ú) */
function setAllyLocked(allyId, locked) {
    const a = allies.find(x => x && x.id === allyId); if (!a) return;
    a.locked = !!locked;
    updateAllAllyUI();
}

/* Ïø®ÌÉÄÏûÑ ÏàòÎèô ÏÑ§Ï†ï(ÌïÑÏöîÏãú) */
function setAllyCooldown(allyId, max, left = max) {
    const a = allies.find(x => x && x.id === allyId); if (!a) return;
    a.cooldownMax = Math.max(0, max | 0);
    a.cooldownLeft = Math.max(0, Math.min(a.cooldownMax, left | 0));
    a.skillReady = (a.cooldownMax > 0 && a.cooldownLeft === 0);
    updateAllAllyUI();
}

/* ======================= Hooks (Ï¥àÍ∏∞Ìôî & ÌÑ¥ Ï¢ÖÎ£å Ïó∞Îèô) ======================= */
document.addEventListener("DOMContentLoaded", () => {
    initAllyOverlays();
});

/* ‚òÖ ÌÑ¥ Ï¢ÖÎ£å ÏãúÏ†êÏóê ÏïÑÎûò Ìï®ÏàòÎ•º Î∞òÎìúÏãú Ìò∏Ï∂úÌïòÏÑ∏Ïöî.
   - Ïòà) resolveBoard() ÎßàÏßÄÎßâ(Ïó∞ÏáÑ Ï¢ÖÎ£å ÌõÑ)ÏóêÏÑú progressSkillCooldowns()
*/
function onTurnEnded_ForSkills() {
    progressSkillCooldowns();
}

/* ======================= Stubs: Ï∞Ω Ïò§Ìîà Ìï®Ïàò ======================= */
/* Ïã§Ï†ú UI Ïó∞ÎèôÎ∂ÄÎäî ÌîÑÎ°úÏ†ùÌä∏ Í∑úÏπôÏóê ÎßûÍ≤å ÍµêÏ≤¥ */
function openStatusWindow(ally) {
    // TODO: ÏÉÅÌÉúÏ∞Ω Ïó¥Í∏∞ (Ïù¥Î¶Ñ/Í≥µÍ≤©/Ï≤¥Î†•/Ïø®ÌÉÄÏûÑ Îì± ÌëúÏãú)
    console.log(`[ÏÉÅÌÉúÏ∞Ω] ${ally.name} HP:${ally.hp}/${ally.maxHp} CD:${ally.cooldownLeft}/${ally.cooldownMax}`);
}

/* ======================= Inline Keyframes (JS ÏÇΩÏûÖ) ======================= */
(function injectHaloKeyframes() {
    const id = "allyHaloPulseKeyframes";
    if (document.getElementById(id)) return;
    const style = document.createElement("style");
    style.id = id;
    style.textContent = `
  @keyframes allyHaloPulse {
    0% { box-shadow: 0 0 6px #00B8FF; transform: scale(1.00); }
    50%{ box-shadow: 0 0 16px #00B8FF; transform: scale(1.02); }
    100%{ box-shadow: 0 0 6px #00B8FF; transform: scale(1.00); }
  }`;
    document.head.appendChild(style);
})();

/* ======================= Modal Helpers ======================= */
function showBackdrop(show) {
    const bd = document.getElementById('modal-backdrop');
    if (!bd) return;
    bd.style.display = show ? 'block' : 'none';
}
function showModal(el, show) {
    if (!el) return;
    el.style.display = show ? 'flex' : 'none';
    showBackdrop(show);
}
function bindModalClose(container) {
    container.querySelectorAll('[data-close]').forEach(btn => {
        btn.onclick = () => showModal(container, false);
    });
}


//* ======================= ÌåùÏóÖ Íµ¨ÌòÑÏ≤¥ ======================= */
function openStatusWindow(ally) {
    const modal = document.getElementById('ally-status-modal');
    if (!modal) return;

    const portraitEl = document.getElementById('allyStatusPortrait');
    const titleEl = modal.querySelector('.ally-modal__title');
    const contentEl = document.getElementById('ally-status-content');

    // üñºÔ∏è Ï∫êÎ¶≠ÌÑ∞ Ï¥àÏÉÅ ÌëúÏãú
    if (portraitEl) {
        const fallback = ally.element ? `icons/${ally.element}l.png` : `icons/ll.png`;
        portraitEl.src = fallback;
        portraitEl.alt = ally.name;
    }

    // üè∑Ô∏è Ïù¥Î¶Ñ ÌëúÏãú
    if (titleEl) titleEl.textContent = ally.name;

    // üìä Îä•Î†•Ïπò ÌëúÏãú
    if (contentEl) {
        contentEl.innerHTML = `
      <p><strong>HP:</strong> ${ally.hp} / ${ally.maxHp}</p>
      <p><strong>Attack:</strong> ${ally.attack}</p>
      <p><strong>Heal:</strong> ${ally.heal}</p>
      <p><strong>Cooldown:</strong> ${ally.cooldownLeft} / ${ally.cooldownMax}</p>
    `;
    }

    // Î™®Îã¨ ÌëúÏãú
    showModal(modal, true);

    // üé® ÏïÑÏù¥ÏΩò Î≥ÄÍ≤Ω Î≤ÑÌäº
    const changeBtn = modal.querySelector('.ally-modal__footer .ally-modal__ok:not(#enhance-button):not([data-close])');
    if (changeBtn) {
        changeBtn.onclick = () => startChangeIconFlow(ally);
    }

    // ü©π Î≥µÍµ¨ Î≤ÑÌäº (ÌòÑÏû¨ Ï∫êÎ¶≠ÌÑ∞Îßå Ï¥àÍ∏∞Ìôî)
    const restoreBtn = modal.querySelector('#restore-button');
    if (restoreBtn) {
        restoreBtn.onclick = () => {
            try {
                // ally.idÍ∞Ä 1~6 Ïà´ÏûêÎùºÍ≥† Í∞ÄÏ†ï (h1~h6)
                const slot = document.getElementById('h' + ally.id);
                if (!slot) {
                    alert('‚ö†Ô∏è Î≥µÍµ¨Ìï† Ïä¨Î°ØÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
                    return;
                }

                const img = slot.querySelector('img');
                if (!img) {
                    alert('‚ö†Ô∏è Ìï¥Îãπ Ïä¨Î°ØÏùò Ïù¥ÎØ∏ÏßÄ ÏöîÏÜåÍ∞Ä ÏóÜÏäµÎãàÎã§.');
                    return;
                }

                // Í∏∞Î≥∏ ÏïÑÏù¥ÏΩò Í≤ΩÎ°ú Ïû¨ÏÑ§Ï†ï
                const path = `icons/h${ally.id}.png`;
                img.src = path;
                img.alt = `ally ${ally.id}`;

                // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ Í∞±Ïã†
                localStorage.setItem(`allyIcon:${ally.id}`, path);

                // ÌïÑÏöî Ïãú Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ (Îã§Î•∏ ÌôîÎ©¥ Î∞òÏòÅÏö©)
                window.dispatchEvent(new CustomEvent('allyIcon:resetOne', { detail: ally.id }));

            } catch (e) {
                console.error(e);
            }
        };
    }

}
// ======================= Í∞ïÌôî Î°úÏßÅ (Ïã§Î≤ÑÌÇ§ / Í≥®ÎìúÌÇ§ Î∂ÑÎ¶¨Ìòï + Ï¶âÏãú Î∞òÏòÅÌòï) =======================
function enhanceCharacter(target) {
    if (!target || !target.id) return;

    // üîπ Rewards ÎØ∏Ï†ïÏùò Ïãú Î≥µÍµ¨ ÏãúÎèÑ
    if (!window.Rewards || !window.Rewards._state) {
        try {
            const saved = JSON.parse(localStorage.getItem("rewardsV1") || "{}");
            window.Rewards = { _state: saved };
            console.warn("‚ö†Ô∏è Rewards Î≥µÍµ¨ ÏãúÎèÑ:", saved);
        } catch {
            alert("Î≥¥ÏÉÅ ÏãúÏä§ÌÖúÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!");
            return;
        }
    }

    const R = window.Rewards?._state;
    if (!R) { alert("Î≥¥ÏÉÅ ÏãúÏä§ÌÖúÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!"); return; }

    // ü•á Î¶¨Îçî Ï†ÑÏö© (Í≥®ÎìúÌÇ§)
    if (target.id === 1) {
        if (R.goldTotal <= 0) {
            alert("‚ö†Ô∏è Í≥®ÎìúÌÇ§Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§!");
            return;
        }

        target.attack += 500;
        target.maxHp += 1000;
        target.heal += 200;
        target.hp = target.maxHp;

        R.goldTotal--;
        alert(`üëë ${target.name} Í∞ïÌôî ÏôÑÎ£å! (Í≥®ÎìúÌÇ§ -1)`);
    }

    // ü•à ÏùºÎ∞ò ÏïÑÍµ∞ Ï†ÑÏö© (Ïã§Î≤ÑÌÇ§)
    else {
        if (R.silverTotal <= 0) {
            alert("‚ö†Ô∏è Ïã§Î≤ÑÌÇ§Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§!");
            return;
        }

        target.attack += 100;
        target.maxHp += 250;
        target.heal += 100;
        target.hp = Math.min(target.hp + 250, target.maxHp);

        R.silverTotal--;
        alert(`üõ°Ô∏è ${target.name} Í∞ïÌôî ÏôÑÎ£å! (Ïã§Î≤ÑÌÇ§ -1)`);
    }

    // üíæ ÌÇ§ ÏÉÅÌÉú Ï†ÄÏû• Î∞è Ìó§Îçî UI Í∞±Ïã†
    localStorage.setItem("rewardsV1", JSON.stringify(R));
    window.dispatchEvent(new CustomEvent('rewards:update'));

    // ü©∏ HP Î∞è ÏïÑÍµ∞ UI Í∞±Ïã† (Ï¶âÏãú Î∞òÏòÅ)
    recalcTotalHP();           // ÌååÌã∞ Ï†ÑÏ≤¥ HPÎ∞î Ïû¨Í≥ÑÏÇ∞
    updateAllAllyUI?.();       // ÏïÑÍµ∞ Ï†ÑÏ≤¥ UI Í∞±Ïã†
    updateAllyHPBar?.();       // Í∞úÎ≥Ñ HPÎ∞î Í∞±Ïã†

    // ‚öôÔ∏è ÏÉÅÌÉúÏ∞Ω(Ïó¥Î¶∞ Í≤ΩÏö∞) Ï¶âÏãú Í∞±Ïã†
    const contentEl = document.getElementById('ally-status-content');
    if (contentEl) {
        contentEl.innerHTML = `
            <p><strong>HP:</strong> ${target.hp} / ${target.maxHp}</p>
            <p><strong>Attack:</strong> ${target.attack}</p>
            <p><strong>Heal:</strong> ${target.heal}</p>
            <p><strong>Cooldown:</strong> ${target.cooldownLeft} / ${target.cooldownMax}</p>
        `;
    }

    // ‚úÖ Í∞ïÌôîÎêú ÏïÑÍµ∞ Ï†ïÎ≥¥ÎèÑ Ï†ÄÏû• (ÏÉàÎ°úÍ≥†Ïπ® ÌõÑÏóêÎèÑ Ïú†ÏßÄ)
    try {
        const advData = JSON.parse(localStorage.getItem(ADV_LS_KEY) || "{}");
        advData.allies = allies.map(a => ({
            id: a.id,
            name: a.name,
            element: a.element,
            attack: a.attack,
            heal: a.heal,
            maxHp: a.maxHp,
            hp: a.hp,
            cooldownLeft: a.cooldownLeft,
            cooldownMax: a.cooldownMax,
            skillReady: a.skillReady
        }));
        // ü©∏ ÌååÌã∞ Ï†ÑÏ≤¥ HPÍ∞íÎèÑ Ìï®Íªò Ï†ÄÏû•
        advData.ally = {
            max: HP.max,
            current: HP.current
        };
        localStorage.setItem(ADV_LS_KEY, JSON.stringify(advData));
    } catch (e) {
        console.warn("‚ö†Ô∏è Í∞ïÌôî Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ï§ë Ïò§Î•ò:", e);
    }

    console.log(`üí™ Í∞ïÌôî ÏôÑÎ£å: ${target.name} (ATK:${target.attack}, HP:${target.maxHp}, HEAL:${target.heal})`);
}


// ======================= Í∞ïÌôî Î≤ÑÌäº Ïù¥Î≤§Ìä∏ =======================
document.addEventListener('DOMContentLoaded', () => {
    const enhanceBtn = document.getElementById('enhance-button');
    if (!enhanceBtn) return;

    enhanceBtn.addEventListener('click', () => {
        const modal = document.getElementById('ally-status-modal');
        if (!modal || modal.style.display === 'none') return;

        // ÌòÑÏû¨ Ïó¥Î¶∞ Ï∫êÎ¶≠ÌÑ∞
        const name = modal.querySelector('.ally-modal__title')?.textContent?.trim();
        const ally = allies.find(a => a.name === name);
        if (!ally) {
            alert('Í∞ïÌôîÌï† ÎåÄÏÉÅÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
            return;
        }

        // Í∞ïÌôî Ïã§Ìñâ
        enhanceCharacter(ally);
    });
});

// ====================== Ïä§ÌÇ¨ Ï†ïÎ≥¥ Ï†ïÏùò ======================
const SKILLS = {
    n: {
        name: "ÏõîÍ¥ëÏàòÌò∏(ÊúàÂÖâÂÆàË≠∑)",
        desc: "ÌçºÏ¶êÌåêÏùò Ïõî(N) ÏÜçÏÑ±ÏùÑ Ï†ÑÎ∂Ä ÌååÍ¥¥ÌïòÍ≥†, Îã§Ïùå ÌÑ¥Ïóê Î∞õÎäî Îç∞ÎØ∏ÏßÄÎ•º 0ÏúºÎ°ú ÎßåÎì†Îã§.",
        effect() {
            const slots = document.querySelectorAll(".puzzle-slot");
            slots.forEach(slot => {
                if (slot.dataset.element === "n") {
                    slot.dataset.element = "";
                    slot.style.backgroundImage = "none";
                }
            });
            window.nextTurnInvincible = 1;
            console.log("üåï ÌòÑÎ¨¥ - ÏõîÍ¥ëÏàòÌò∏ Î∞úÎèô!");
        }
    },
    s: {
        name: "ÌôîÏàòÎ≥Ä(ÁÅ´Ê∞¥ËÆä)",
        desc: "ÌçºÏ¶êÌåêÏùò Ïàò(E) ÏÜçÏÑ±ÏùÑ Ï†ÑÎ∂Ä Ìôî(S) ÏÜçÏÑ±ÏúºÎ°ú Î∞îÍæ∏Í≥†, Î∞îÎÄê ÌçºÏ¶ê ÌïòÎÇòÎãπ HP 50 ÌöåÎ≥µ.",
        effect() {
            const slots = document.querySelectorAll(".puzzle-slot");
            let converted = 0;
            slots.forEach(slot => {
                if (slot.dataset.element === "e") {
                    slot.dataset.element = "s";
                    slot.style.backgroundImage = `url('icons/s.png')`;
                    converted++;
                }
            });
            const heal = converted * 50;
            HP.changeHP(heal);
            showHealTotalEffect(heal);
            console.log(`üî• Ï£ºÏûë - ÌôîÏàòÎ≥Ä Î∞úÎèô! ${converted}Í∞ú Î≥ÄÌôò, ${heal} ÌöåÎ≥µ`);
        }
    },
    e: {
        name: "ÏàòÎ£°ÌÉÑ(Ê∞¥ÈæçÂΩà)",
        desc: "Ïù¥Î≤à ÌÑ¥ ÎèôÏïà Ï≤≠Î£°Ïùò Í≥µÍ≤©Î†•ÏùÑ 2Î∞∞Î°ú Ïò¨Î¶∞Îã§.",
        effect() {
            const ally = allies.find(a => a.element === "e");
            if (ally) {
                ally.attack *= 2;
                setTimeout(() => (ally.attack /= 2), 10000);
            }
            console.log("üåä Ï≤≠Î£° - ÏàòÎ£°ÌÉÑ Î∞úÎèô! Í≥µÍ≤©Î†• 2Î∞∞");
        }
    },
    w: {
        name: "ÏÑúÎ™©Ï∞Ω(Ë•øÊú®Êßç)",
        desc: "ÌçºÏ¶êÌåêÏùò Î™©(W) ÏÜçÏÑ± ÌçºÏ¶ê ÌïòÎÇòÎãπ Ï†ÅÏóêÍ≤å 100Ïùò Îç∞ÎØ∏ÏßÄÎ•º Ï§ÄÎã§.",
        effect() {
            const slots = document.querySelectorAll(".puzzle-slot");
            let count = 0;
            slots.forEach(slot => {
                if (slot.dataset.element === "w") count++;
            });
            const dmg = count * 100;
            EnemyHP.damage(dmg);
            console.log(`üêØ Î∞±Ìò∏ - ÏÑúÎ™©Ï∞Ω Î∞úÎèô! ${count}Í∞ú ‚Üí ${dmg} ÌîºÌï¥`);
        }
    },
    m: {
        name: "ÏÉùÏõîÏùºÎ≥Ä(ÁîüÊúàÊó•ËÆä)",
        desc: "ÌçºÏ¶êÌåêÏùò ÏÉùÎ™Ö(L), Ïõî(N) ÏÜçÏÑ±ÏùÑ Ï†ÑÎ∂Ä Ïùº(M) ÏÜçÏÑ±ÏúºÎ°ú Î∞îÍæºÎã§.",
        effect() {
            const slots = document.querySelectorAll(".puzzle-slot");
            let changed = 0;
            slots.forEach(slot => {
                if (slot.dataset.element === "l" || slot.dataset.element === "n") {
                    slot.dataset.element = "m";
                    slot.style.backgroundImage = `url('icons/m.png')`;
                    changed++;
                }
            });
            console.log(`ü¶å Í∏∞Î¶∞ - ÏÉùÏõîÏùºÎ≥Ä Î∞úÎèô! ${changed}Í∞ú Î≥ÄÌôò`);
        }
    },
    leader: {
        name: "Ï≤úÎ≥ÄÏùºÍ≤©(Â§©ËÆä‰∏ÄÊìä)",
        desc: "ÌòÑÏû¨ ÌçºÏ¶êÌåêÏóêÏÑú Í∞ÄÏû• ÎßéÏùÄ ÏÜçÏÑ±Ïùò ÎèåÏùÑ Ï†ÑÎ∂Ä ÌååÍ¥¥ÌïòÍ≥†, Í∑∏ Í∞úÏàò √ó 100 Îç∞ÎØ∏ÏßÄÎ•º Ï§ÄÎã§.",
        effect() {
            const slots = document.querySelectorAll(".puzzle-slot");
            const countMap = {};

            // 1Ô∏è‚É£ Í∞Å ÏÜçÏÑ±Î≥Ñ Í∞úÏàò ÏÑ∏Í∏∞
            slots.forEach(slot => {
                const el = slot.dataset.element;
                if (!el) return;
                countMap[el] = (countMap[el] || 0) + 1;
            });

            // 2Ô∏è‚É£ Í∞ÄÏû• ÎßéÏùÄ ÏÜçÏÑ± Ï∞æÍ∏∞
            let topElement = null;
            let topCount = 0;
            for (const [el, cnt] of Object.entries(countMap)) {
                if (cnt > topCount) {
                    topElement = el;
                    topCount = cnt;
                }
            }

            if (!topElement || topCount === 0) {
                console.log("‚ö†Ô∏è ÌååÍ¥¥Ìï† ÌçºÏ¶êÏù¥ ÏóÜÏäµÎãàÎã§.");
                return;
            }

            // 3Ô∏è‚É£ Ìï¥Îãπ ÏÜçÏÑ± ÌçºÏ¶ê Ï†ÑÎ∂Ä Ï†úÍ±∞
            slots.forEach(slot => {
                if (slot.dataset.element === topElement) {
                    slot.dataset.element = "";
                    slot.style.backgroundImage = "none";
                }
            });

            // 4Ô∏è‚É£ Îç∞ÎØ∏ÏßÄ Í≥ÑÏÇ∞ Î∞è Ï†ÅÏö©
            const dmg = topCount * 100;
            EnemyHP.damage(dmg);
            console.log(`üëë Î¶¨Îçî - Ï≤úÎ≥ÄÏùºÍ≤© Î∞úÎèô! (${topElement}) ${topCount}Í∞ú ÌååÍ¥¥, ${dmg} ÌîºÌï¥`);
        }
    }
};


let _skillTarget = null;
// ====================== Ïä§ÌÇ¨Ï∞Ω ÌëúÏãú / ÏÇ¨Ïö© Î°úÏßÅ ======================
function openSkillWindow(ally) {
    const modal = document.getElementById("ally-skill-modal");
    if (!modal) return;

    const titleEl = modal.querySelector(".ally-modal__title");
    const descEl = document.getElementById("ally-skill-content");
    const useBtn = document.getElementById("btn-skill-use");
    const cancelBtn = modal.querySelector(".ally-modal__cancel");

    // Ïä§ÌÇ¨ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ (Î¶¨Îçî Ìè¨Ìï®)
    let skill;
    if (ally.id === 1) {
        skill = SKILLS["leader"];
    } else {
        skill = SKILLS[ally.element];
    }
    if (!skill) {
        if (titleEl) titleEl.textContent = "Ïä§ÌÇ¨ ÏóÜÏùå";
        if (descEl) descEl.textContent = "Ïù¥ ÏïÑÍµ∞ÏùÄ Ïä§ÌÇ¨ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.";
        showModal(modal, true);
        return;
    }

    // Ïù¥Î¶ÑÍ≥º ÏÑ§Î™Ö ÏÑ∏ÌåÖ
    if (titleEl) titleEl.textContent = skill.name || "Ïä§ÌÇ¨";
    if (descEl) descEl.textContent = skill.desc || "ÏÑ§Î™ÖÏù¥ ÏóÜÏäµÎãàÎã§.";

    // Î≤ÑÌäº Ïù¥Î≤§Ìä∏ Ï¥àÍ∏∞Ìôî
    if (useBtn) {
        useBtn.onclick = () => {
            try {
                // Ïä§ÌÇ¨ Ìö®Í≥º Î∞úÎèô
                skill.effect();

                // Ïø®ÌÉÄÏûÑ Ï¥àÍ∏∞Ìôî
                ally.cooldownLeft = ally.cooldownMax;
                ally.skillReady = false;

                // ÏÉÅÌÉú Í∞±Ïã†
                updateAllAllyUI?.();
                showModal(modal, false);

                console.log(`‚úÖ ${ally.name} Ïä§ÌÇ¨ "${skill.name}" Î∞úÎèô ÏôÑÎ£å`);
            } catch (err) {
                console.error("Ïä§ÌÇ¨ Î∞úÎèô Ï§ë Ïò§Î•ò:", err);
            }
        };
    }

    if (cancelBtn) {
        cancelBtn.onclick = () => showModal(modal, false);
    }

    // Î™®Îã¨ ÌëúÏãú
    showModal(modal, true);
}

document.addEventListener("DOMContentLoaded", () => {
  // ÏÉÅÌÉúÏ∞Ω/Ïä§ÌÇ¨Ï∞Ω Îã´Í∏∞ Î≤ÑÌäº Í∏∞Îä•
  document.querySelectorAll("[data-close]").forEach((btn) => {
    btn.addEventListener("click", () => {
      const modal = btn.closest(".ally-modal");
      if (modal) {
        modal.style.display = "none";
        const backdrop = document.getElementById("modal-backdrop");
        if (backdrop) backdrop.style.display = "none";
      }
    });
  });

  // Î∞±ÎìúÎ°≠ ÌÅ¥Î¶≠ Ïãú Î™®Îã¨ Îã´Í∏∞
  const backdrop = document.getElementById("modal-backdrop");
  if (backdrop) {
    backdrop.addEventListener("click", () => {
      document.querySelectorAll(".ally-modal").forEach((modal) => {
        modal.style.display = "none";
      });
      backdrop.style.display = "none";
    });
  }
});

document.addEventListener('DOMContentLoaded', () => {
    const toggleBtn = document.getElementById('btnToggleFooterZ');
    const footer = document.querySelector('footer');
    let footerZHigh = false;

    if (toggleBtn && footer) {
        toggleBtn.addEventListener('click', () => {
            footerZHigh = !footerZHigh;
            footer.style.zIndex = footerZHigh ? '6000' : '1000';

            // ‚úÖ Ìë∏ÌÑ∞ Îã´Ìûê Îïå, ÌåùÏóÖÏùÑ ÏôÑÏ†ÑÌûà Ïà®Í∏∞ÏßÄ ÏïäÍ≥† zIndexÎßå Ï¥àÍ∏∞Ìôî
            if (!footerZHigh) {
                document.querySelectorAll('.popup.show').forEach(p => {
                    p.classList.remove('show');
                    // ÌåùÏóÖÏùÄ Îã´ÏùÄ ÌëúÏãúÎßå, displayÎäî Í∑∏ÎåÄÎ°ú Îë†
                });
            }
        });
    }
});



function updateStageButtonText() {
    const btnStage = document.getElementById('btnToggleFooterZ');
    if (!btnStage) return;

    const stage = localStorage.getItem('currentStage') || 1;
    btnStage.textContent = `Rank ${stage}`;
}

function startNextStage() {
    const next = Number(localStorage.getItem('currentStage') || 1) + 1;
    localStorage.setItem('currentStage', next);
    restoreAdventureState();
    updateStageButtonText();
}
document.addEventListener('DOMContentLoaded', () => {
    updateStageButtonText();
});

/* ======================= ÏïÑÏù¥ÏΩò Î≥ÄÍ≤Ω (ÌååÏùºÏÑ†ÌÉù + ÌÅ¨Î°≠ + Ï†ÄÏû•) ======================= */
let _iconTargetAlly = null;
let _iconImg = null;
let _iconScale = 1, _iconMinScale = 1;
let _iconPos = { x: 0, y: 0 };
let _drag = { active: false, sx: 0, sy: 0 };

const $file = () => document.getElementById('iconFileInput');
const $cropModal = () => document.getElementById('iconCropModal');
const $canvas = () => document.getElementById('iconCropCanvas');
const $zoom = () => document.getElementById('iconZoom');

function startChangeIconFlow(ally) {
    _iconTargetAlly = ally;
    const fi = $file();
    if (!fi) return;
    fi.value = "";          // Í∞ôÏùÄ ÌååÏùº Ïû¨ÏÑ†ÌÉù ÌóàÏö©
    fi.onchange = onIconFileSelected;
    fi.click();
}

function onIconFileSelected(e) {
    const file = e.target.files && e.target.files[0];
    if (!file) return;

    const img = new Image();
    img.onload = () => {
        _iconImg = img;
        openCropper();
    };
    img.onerror = () => alert("Ïù¥ÎØ∏ÏßÄÎ•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
    const reader = new FileReader();
    reader.onload = ev => { img.src = ev.target.result; };
    reader.readAsDataURL(file);
}

function openCropper() {
    const modal = $cropModal();
    const cvs = $canvas();
    const z = $zoom();
    if (!modal || !cvs || !z || !_iconImg) return;

    // Ï¥àÍ∏∞ Î∞∞Ïπò: Ï∫îÎ≤ÑÏä§Î•º ÍΩâ Ï±ÑÏö∞Îäî cover Ïä§ÏºÄÏùº
    const cw = cvs.width, ch = cvs.height;
    const iw = _iconImg.width, ih = _iconImg.height;
    _iconMinScale = Math.max(cw / iw, ch / ih);
    _iconScale = Math.max(_iconMinScale, 1);   // Í∏∞Î≥∏ 1Î∞∞ Ïù¥ÏÉÅ
    _iconPos.x = (cw - iw * _iconScale) / 2;
    _iconPos.y = (ch - ih * _iconScale) / 2;

    z.min = (_iconMinScale).toFixed(2);
    z.max = "3.00";
    z.step = "0.01";
    z.value = String(_iconScale);

    bindCropperEvents();
    drawCropper();
    showModal(modal, true);
}

function bindCropperEvents() {
    const cvs = $canvas();
    const z = $zoom();
    if (!cvs || !z) return;

    // Ï§å Ïä¨ÎùºÏù¥Îçî
    z.oninput = () => {
        const cw = cvs.width, ch = cvs.height;
        const iw = _iconImg.width, ih = _iconImg.height;

        // Ï§ëÏã¨ Í∏∞Ï§Ä ÌôïÎåÄ/Ï∂ïÏÜå
        const prev = _iconScale;
        _iconScale = Math.max(_iconMinScale, Math.min(3, Number(z.value) || _iconScale));
        const scaleRatio = _iconScale / prev;

        // ÌôïÎåÄ Ïãú Ï§ëÏã¨ Ïú†ÏßÄ
        const cx = cw / 2, cy = ch / 2;
        _iconPos.x = cx - (cx - _iconPos.x) * scaleRatio;
        _iconPos.y = cy - (cy - _iconPos.y) * scaleRatio;

        clampPosition();
        drawCropper();
    };

    // ÎìúÎûòÍ∑∏(ÎßàÏö∞Ïä§/ÌÑ∞Ïπò)
    const start = (x, y) => { _drag = { active: true, sx: x, sy: y }; };
    const move = (x, y) => {
        if (!_drag.active) return;
        _iconPos.x += (x - _drag.sx);
        _iconPos.y += (y - _drag.sy);
        _drag.sx = x; _drag.sy = y;
        clampPosition();
        drawCropper();
    };
    const end = () => { _drag.active = false; };

    // Pointer Ïù¥Î≤§Ìä∏ ÌÜµÌï©
    cvs.onpointerdown = (ev) => { cvs.setPointerCapture(ev.pointerId); start(ev.clientX, ev.clientY); };
    cvs.onpointermove = (ev) => move(ev.clientX, ev.clientY);
    cvs.onpointerup = end;
    cvs.onpointercancel = end;

    // Ï†ÄÏû• Î≤ÑÌäº
    const saveBtn = document.getElementById('iconCropSave');
    if (saveBtn) {
        saveBtn.onclick = saveCroppedIcon;
    }

    // Î™®Îã¨Ïùò data-close Î≤ÑÌäºÏùÄ Í∏∞Ï°¥ bindModalCloseÎ°ú Îã´Ìûò
}

function clampPosition() {
    const cvs = $canvas();
    const iw = _iconImg.width, ih = _iconImg.height;
    const cw = cvs.width, ch = cvs.height;
    const vw = iw * _iconScale, vh = ih * _iconScale;

    // Ïù¥ÎØ∏ÏßÄÎäî Ï∫îÎ≤ÑÏä§Î•º ÏôÑÏ†ÑÌûà ÎçÆÏñ¥Ïïº Ìï® ‚Üí Í∞ÄÏû•ÏûêÎ¶¨ ÎπàÌãà Î∞©ÏßÄ
    if (vw <= cw) {
        _iconPos.x = (cw - vw) / 2;
    } else {
        const minX = cw - vw, maxX = 0;
        _iconPos.x = Math.max(minX, Math.min(maxX, _iconPos.x));
    }
    if (vh <= ch) {
        _iconPos.y = (ch - vh) / 2;
    } else {
        const minY = ch - vh, maxY = 0;
        _iconPos.y = Math.max(minY, Math.min(maxY, _iconPos.y));
    }
}

function drawCropper() {
    const cvs = $canvas(); if (!cvs) return;
    const ctx = cvs.getContext('2d');
    const cw = cvs.width, ch = cvs.height;

    ctx.clearRect(0, 0, cw, ch);
    ctx.fillStyle = "#000";
    ctx.fillRect(0, 0, cw, ch);

    if (_iconImg) {
        ctx.imageSmoothingQuality = 'high';
        ctx.drawImage(_iconImg, _iconPos.x, _iconPos.y, _iconImg.width * _iconScale, _iconImg.height * _iconScale);
    }
}

function saveCroppedIcon() {
    const cvs = $canvas();
    const modal = $cropModal();
    if (!cvs || !_iconTargetAlly) return;

    const dataUrl = cvs.toDataURL('image/png'); // 512√ó512 PNG
    try {
        localStorage.setItem(`allyIcon:${_iconTargetAlly.id}`, dataUrl);
    } catch (e) {
        alert("Ï†ÄÏû• Í≥µÍ∞ÑÏù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§. Îã§Î•∏ ÏïÑÏù¥ÏΩòÏùÑ ÏùºÎ∂Ä ÏÇ≠Ï†úÌï¥Ï£ºÏÑ∏Ïöî.");
        return;
    }

    // Ï†ÄÏû• ÏßÅÌõÑ Ï¶âÏãú Î∞òÏòÅ (ÏàòÏ†ïÎ≥∏)
    const slot = document.getElementById('h' + _iconTargetAlly.id);
    if (slot) {
        const img = slot.querySelector('img');
        if (img) img.src = dataUrl;       // ‚Üê Î™®Ìóò 6Ïπ∏ Ï§ë Ìï¥Îãπ Ïπ∏ ÏóÖÎç∞Ïù¥Ìä∏
    }

    showModal(modal, false);
    // ÌïÑÏöî Ïãú: Ïª§Ïä§ÌÖÄ Ïù¥Î≤§Ìä∏Î°ú Îã§Î•∏ UI Î¶¨ÌîÑÎ†àÏãú
    window.dispatchEvent(new CustomEvent('allyIcon:updated', { detail: { id: _iconTargetAlly.id } }));
}

// Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏùò Ïª§Ïä§ÌÖÄ ÏïÑÏù¥ÏΩòÏùÑ 6Ïπ∏ Ïä¨Î°ØÏóê Î∞òÏòÅ
function applyCustomAllyIconsToSlots() {
    for (let i = 1; i <= 6; i++) {
        const slot = document.getElementById('h' + i);
        if (!slot) continue;
        const img = slot.querySelector('img');
        if (!img) continue;

        const custom = localStorage.getItem(`allyIcon:${i}`);
        if (custom) img.src = custom;   // Ï†ÄÏû•Îêú Í≤å ÏûàÏúºÎ©¥ data URL Ï†ÅÏö©
        // Ï†ÄÏû•Ïù¥ ÏóÜÏúºÎ©¥ index.htmlÏùò Í∏∞Î≥∏ src Ïú†ÏßÄ(icons/h{i}.png)
    }
}


// Ï≤´ Î°úÎî© Îïå Ìïú Î≤à Ï†ÅÏö©
document.addEventListener('DOMContentLoaded', () => {
    applyCustomAllyIconsToSlots();
});

document.addEventListener('DOMContentLoaded', () => {
  const restoredEnemy = restoreEnemyFromLocal();
  const restoredAdventure = restoreAdventureState();

  // ÏôÑÏ†Ñ Ïã†Í∑úÏùº ÎïåÎßå ÏÉà Ï†Å ÏÉùÏÑ±
  if (!restoredEnemy && !restoredAdventure) {
    EnemyHP.init(1000);
    spawnEnemiesByStage(); // ÏÉà Ï†Å ÎûúÎç§ ÏÉùÏÑ±
    initPuzzleBoard();
    turnMovesLeft = turnMovesMax;
    updateTurnGauge();
    saveAdventureState();
  }
});


// ====== spawnEnemiesByStage (ÏàòÏ†ï/ÎåÄÏ≤¥) ======
function spawnEnemiesByStage() {
    const profile = JSON.parse(localStorage.getItem('profileV1') || '{}');
    const stage = Number(profile.rank || 1);
    const isElite = stage % 5 === 0;

    const attrs = ['1', '2', '3', '4', '5'];
    const attr = attrs[Math.floor(Math.random() * attrs.length)];

    const codes = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'];

    let selected = [];
    let tiers = [];

    if (isElite) {
        const patterns = [
            [1, 3, 2],
            [2, 3, 1],
            [2, 3, 2],
            [1, 3, 1]
        ];
        tiers = patterns[Math.floor(Math.random() * patterns.length)];
        const bossCode = codes[Math.floor(Math.random() * codes.length)];
        selected = [bossCode, bossCode, bossCode];
    } else {
        tiers = [1, 2, 1];
        const baseCode = codes[Math.floor(Math.random() * codes.length)];
        selected = [baseCode, baseCode, baseCode];
    }

    // Ïù¥ÎØ∏ÏßÄ Ï†ÅÏö© ‚Äî Ìã∞Ïñ¥Ïóê Îî∞Îùº Ï†ÑÏó≠ Î¶¨Ï°∏Î≤Ñ Ïö∞ÏÑ† ÏÇ¨Ïö©
    ['left', 'center', 'right'].forEach((pos, i) => {
        const img = document.querySelector(`#monster-${pos} img`);
        if (!img) return;

        let src;
        if (tiers[i] === 3 && typeof window.getEliteIllustURL === 'function') {
            src = window.getEliteIllustURL(attr, selected[i]);
        } else if (tiers[i] === 2 && typeof window.getBossIllustURL === 'function') {
            src = window.getBossIllustURL(attr, selected[i]);
        } else {
            src = `enemy/${selected[i]}${tiers[i]}${attr}.png`;
        }

        img.src = src;
        console.log(`‚öîÔ∏è ${pos}: ${src}`);
    });

    window.currentEnemy = { codes: selected, tiers, attr };

    localStorage.setItem(
        'enemyStateV1',
        JSON.stringify({ codes: selected, tiers, attr, maxHp: EnemyHP.max, currentHp: EnemyHP.current })
    );
    afterEnemySpawned();
}

// ====== restoreEnemyFromLocal (ÏàòÏ†ï / Î≥µÏõêÏãúÏóêÎèÑ Î¶¨Ï°∏Î≤Ñ ÏÇ¨Ïö©) ======
function restoreEnemyFromLocal() {
    const savedEnemy = localStorage.getItem('enemyStateV1');
    if (!savedEnemy) return false;

    try {
        const e = JSON.parse(savedEnemy);
        if (e.codes && e.tiers && e.attr) {
            EnemyHP.max = e.maxHp || 1000;
            EnemyHP.current = e.currentHp ?? EnemyHP.max;
            EnemyHP.updateBar();

            ['left', 'center', 'right'].forEach((pos, i) => {
                const img = document.querySelector(`#monster-${pos} img`);
                if (!img) return;
                let src;
                if (e.tiers[i] === 3 && typeof window.getEliteIllustURL === 'function') {
                    src = window.getEliteIllustURL(e.attr, e.codes[i]);
                } else if (e.tiers[i] === 2 && typeof window.getBossIllustURL === 'function') {
                    src = window.getBossIllustURL(e.attr, e.codes[i]);
                } else {
                    src = `enemy/${e.codes[i]}${e.tiers[i]}${e.attr}.png`;
                }
                img.src = src;
            });

            window.currentEnemy = { codes: e.codes, tiers: e.tiers, attr: e.attr };

            // ‚úÖ ÌÑ¥ UI Î≥µÏõê Ï∂îÍ∞Ä
            initEnemyTurnUI();
            updateEnemyTurnUI();

            return true;
        }
    } catch (err) {
        console.warn('enemyStateV1 Î≥µÏõê Ïã§Ìå®', err);
    }
    return false;
}

// ====== ÎèÑÍ∞ê Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏ ÏàòÏã† ‚Äî Î™®Ìóò Ï§ëÏù¥Î©¥ Ï¶âÏãú Í∞±Ïã† ======
window.addEventListener('bestiary:update', (ev) => {
    try {
        const detail = ev?.detail || {};
        const changedAttr = String(detail.attr);   // Ïòà: '1','2',... (ÎèÑÍ∞êÏóêÏÑú Ï†ÄÏû•Ìïú Í∞í)
        const changedMotif = String(detail.motif); // Ïòà: 'a','b',...

        // ÌòÑÏû¨ Ï†ÑÌà¨ Ï§ëÏù∏ Ï†Å Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Î¨¥Ïãú
        if (!window.currentEnemy) return;

        // ÌòÑÏû¨ Ï†ÅÍ≥º ÏÜçÏÑ±Ïù¥ Í∞ôÍ≥†, ÏΩîÎìú(Î™®Ìã∞ÌîÑ)Í∞Ä ÏùºÏπòÌïòÎ©∞ Ìï¥Îãπ ÏúÑÏπòÍ∞Ä ÏóòÎ¶¨Ìä∏(Ìã∞Ïñ¥ 3)ÎùºÎ©¥ ÏóÖÎç∞Ïù¥Ìä∏
        const { codes, tiers, attr } = window.currentEnemy;
        if (!codes || !tiers) return;

        // attr ÎπÑÍµêÎäî ÏóÑÍ≤©ÌïòÍ≤å Î¨∏ÏûêÏó¥Î°ú
        if (String(attr) !== String(changedAttr)) return;

        ['left', 'center', 'right'].forEach((pos, i) => {
            if (tiers[i] === 3 && String(codes[i]) === changedMotif) {
                const img = document.querySelector(`#monster-${pos} img`);
                if (!img) return;
                // ÏóòÎ¶¨Ìä∏ Ïù¥ÎØ∏ÏßÄÎäî Ï†ÑÏó≠ Î¶¨Ï°∏Î≤ÑÎ°ú Í∞ÄÏ†∏Ïò¥
                if (typeof window.getEliteIllustURL === 'function') {
                    img.src = window.getEliteIllustURL(attr, codes[i]);
                }
            }
        });
    } catch (err) {
        console.warn('bestiary:update Ï≤òÎ¶¨ Ï§ë ÏóêÎü¨', err);
    }
});



const btnCardTeam = document.getElementById('btnCardTeam');
const cardTeam = document.getElementById('CardTeam');
const btnGoHome = document.getElementById('btnGoHome');

// ÎèÑÍ∞ê Î≤ÑÌäº ÌÅ¥Î¶≠ ‚Üí ÎèÑÍ∞ê ÌëúÏãú
btnCardTeam?.addEventListener('click', () => {
    cardTeam.classList.add('show');
});

// Ìôà Î≤ÑÌäº ÌÅ¥Î¶≠ ‚Üí ÎèÑÍ∞ê Îã´Í∏∞
btnGoHome?.addEventListener('click', () => {
    cardTeam.classList.remove('show');
});


// ‚úÖ ÏïàÏ†ÑÌïú ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Î°ú Î≥ÄÍ≤Ω
window.BESTIARY_DATA = {
    A: { 1: { atk: 100, turn: 2 }, 2: { atk: 200, turn: 3 }, 3: { atk: 300, turn: 1 } },
    B: { 1: { atk: 300, turn: 2 }, 2: { atk: 600, turn: 3 }, 3: { atk: 900, turn: 3 } },
    C: { 1: { atk: 400, turn: 2 }, 2: { atk: 800, turn: 3 }, 3: { atk: 1200, turn: 5 } },
    D: { 1: { atk: 100, turn: 2 }, 2: { atk: 200, turn: 3 }, 3: { atk: 300, turn: 1 } },
    E: { 1: { atk: 400, turn: 2 }, 2: { atk: 800, turn: 3 }, 3: { atk: 1200, turn: 5 } },
    F: { 1: { atk: 100, turn: 2 }, 2: { atk: 200, turn: 3 }, 3: { atk: 600, turn: 3 } },
    G: { 1: { atk: 300, turn: 2 }, 2: { atk: 400, turn: 3 }, 3: { atk: 500, turn: 1 } },
    H: { 1: { atk: 200, turn: 2 }, 2: { atk: 300, turn: 3 }, 3: { atk: 400, turn: 3 } },
    I: { 1: { atk: 100, turn: 2 }, 2: { atk: 200, turn: 3 }, 3: { atk: 300, turn: 1 } },
    J: { 1: { atk: 100, turn: 2 }, 2: { atk: 200, turn: 3 }, 3: { atk: 600, turn: 1 } },
    K: { 1: { atk: 200, turn: 2 }, 2: { atk: 400, turn: 3 }, 3: { atk: 1000, turn: 1 } },
    L: { 1: { atk: 100, turn: 2 }, 2: { atk: 200, turn: 3 }, 3: { atk: 400, turn: 5 } },
};

/* ===============================
   üéØ Ï†Å ÌÑ¥ UI (ÌÑ¥ Ïàò ÏãúÍ∞ÅÌôî Í∞úÏÑ† Î≤ÑÏ†Ñ)
================================= */

// EnemyListÍ∞Ä Ï†ÑÏó≠Ïóê ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
window.EnemyList = window.EnemyList || [];

// ===== ÌÑ¥ Í∞±Ïã† =====
function updateEnemyTurnUI() {
    if (!window.EnemyList || !Array.isArray(EnemyList)) return;
    EnemyList.forEach(enemy => {
        const el = document.querySelector(`#monster-${enemy.id} .enemy-turn`);
        if (el) el.textContent = `${enemy.counter}t`;
    });
}

// ===== ÌÑ¥ Í∞êÏÜå Ìï®Ïàò =====
function decreaseEnemyTurn(index) {
    if (!window.EnemyList || !EnemyList[index]) return;
    const enemy = EnemyList[index];
    enemy.counter -= 1;
    if (enemy.counter <= 0) {
        enemy.counter = enemy.turn; // Ï¥àÍ∏∞Ìôî
    }
    updateEnemyTurnUI();
}

// ===== Ï†Å ÏÉùÏÑ± ÏßÅÌõÑ ÌÑ¥ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî =====
function initEnemyTurnUI() {
    // currentEnemy Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Î≥µÏõê ÏãúÎèÑ
    const enemyData = window.currentEnemy;
    if (!enemyData || !enemyData.codes) return;

    const profile = JSON.parse(localStorage.getItem('profileV1') || '{}');
    const stageLevel = Number(profile.rank || 1);

    EnemyList = []; // ÏÉàÎ°ú Ï¥àÍ∏∞Ìôî

    ['left', 'center', 'right'].forEach((pos, i) => {
        const monster = document.querySelector(`#monster-${pos}`);
        if (!monster) return;

        // Ï†Å ÏΩîÎìú, Ìã∞Ïñ¥, ÏÜçÏÑ± Ï∂îÏ∂ú
        const code = enemyData.codes[i]?.toUpperCase?.() || 'A';
        const tier = enemyData.tiers[i] || 1;

        // ENEMY_TABLEÏùò ÌÑ¥Í∞í Í∞ÄÏ†∏Ïò§Í∏∞
        const entry = window.BESTIARY_DATA?.[code]?.[tier] || { atk: 100, turn: 2 };
        const turnValue = entry.turn;

        // EnemyListÏóê Ï∂îÍ∞Ä
        EnemyList.push({
            id: pos,
            code,
            tier,
            turn: turnValue,
            counter: turnValue,
        });

        // ÌÑ¥ ÌÖçÏä§Ìä∏ ÏóòÎ¶¨Î®ºÌä∏ ÏÉùÏÑ±
        let turnEl = monster.querySelector('.enemy-turn');
        if (!turnEl) {
            turnEl = document.createElement('div');
            turnEl.className = 'enemy-turn';
            Object.assign(turnEl.style, {
                position: 'absolute',
                right: '15%',
                top: '45%',
                fontWeight: '900',
                color: '#ff3b3b',
                fontSize: '1.8vw',
                textShadow: '0 0 4px #660000',
                zIndex: '9999',
                pointerEvents: 'none',
                userSelect: 'none',
            });
            monster.style.position = monster.style.position || 'relative';
            monster.appendChild(turnEl);
        }

        // Ï¶âÏãú ÌëúÏãú
        turnEl.textContent = `${turnValue}t`;
    });
}

// ===== Ï†Å ÏÉùÏÑ± ÏôÑÎ£å ÌõÑ Ìï≠ÏÉÅ Ìò∏Ï∂ú =====
function afterEnemySpawned() {
    initEnemyTurnUI();
    updateEnemyTurnUI();
}

function handleTurnAdvance() {
    // ÌÑ¥ Ï∞®Í∞ê
    EnemyList.forEach((_, i) => decreaseEnemyTurn(i));

    // (ÏÑ†ÌÉù) ÌÑ¥ Ï¢ÖÎ£å Ïãú Ï∂îÍ∞Ä Ïù¥ÌéôÌä∏ÎÇò Î°úÍ∑∏
    console.log("ÌÑ¥ ÏßÑÌñâ ÏôÑÎ£å ‚öîÔ∏è");

    // ‚úÖ Ï†ÅÏùò Í≥µÍ≤© ÌÑ¥ ÎèÑÎûò Ïãú Îç∞ÎØ∏ÏßÄ Ï†ÅÏö©
    EnemyList.forEach((enemy) => {
        if (enemy.counter === enemy.turn) { // ÌÑ¥Ïù¥ Ï¥àÍ∏∞ÌôîÎêú Ï†Å = Í≥µÍ≤© ÌÑ¥
            const entry = window.BESTIARY_DATA?.[enemy.code]?.[enemy.tier];
            const baseDmg = entry?.atk || 100;
            const profile = JSON.parse(localStorage.getItem('profileV1') || '{}');
            const stage = Number(profile.rank || 1);
            const damage = baseDmg + stage * 10; // Ïä§ÌÖåÏù¥ÏßÄ Î≥¥Ï†ï
            applyEnemyAttack(damage);
        }
    });

    // üïí ÌÑ¥ Ï¢ÖÎ£å Ïãú Ïä§ÌÇ¨ Ïø®ÌÉÄÏûÑ 1 Í∞êÏÜå
    progressSkillCooldown();

    if (window.nextTurnInvincible > 0) {
        window.nextTurnInvincible--;
    }
}
// ====================== ÌÑ¥ Ï¢ÖÎ£å Ïãú Ïø®ÌÉÄÏûÑ Í∞êÏÜå ======================
function progressSkillCooldown() {
    allies.forEach(a => {
        if (!a) return;
        if (a.cooldownMax <= 0) return; // Ïø®ÌÉÄÏûÑ ÏóÜÎäî Ï∫êÎ¶≠ÌÑ∞ Ï†úÏô∏
        if (a.skillReady) return;        // Ïù¥ÎØ∏ Ï§ÄÎπÑ ÏôÑÎ£åÎ©¥ Ïä§ÌÇµ

        // ÌÑ¥Îãπ 1Ïî© Í∞êÏÜå
        a.cooldownLeft = Math.max(0, (a.cooldownLeft || 0) - 1);
        if (a.cooldownLeft === 0) a.skillReady = true;
    });
    updateAllAllyUI?.();
}
// Ï†ÑÏó≠ Ïñ¥ÎîòÍ∞Ä (Í∞ÄÏû• ÏúÑÎì† ÏïÑÎûòÎì† ÏÉÅÍ¥Ä ÏóÜÏùå)
Object.defineProperty(window, 'nextTurnInvincible', {
    set(v) {
        console.log('üß≠ nextTurnInvincible Î≥ÄÍ≤Ω ‚Üí', v, new Error().stack.split('\n')[2]);
        this._nti = v;
    },
    get() { return this._nti || 0; }
});
